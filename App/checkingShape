/*
Fichier contenant les fonctions permettant de voir si on peux bouger
la figure dans l'espace de jeu
*/

// Fonction permettant de voir si on peux ce déplacer à gauche
function isLeftOk(shape as TetrisShape, dataGrid as dataGridGame)
	leftOk as integer = 1
	shapeLine as string
	i as integer
	j as integer
	checksX as integer[4] = [0,0,0,0,0]
	xPositions as integer[4] = [0,0,0,0,0]
	
	for i = 1 to 4
		shapeLine = shape.rotation[shape.moveShapeRotation, i]
		
		for j = 1 to 4
			if(checksX[i] = 0 and (Val(Mid(shapeLine,j,1)) <> 0))
				checksX[i] = j
			endIf
		next j
	next i
	
	// On trouve la position x des colonnes dans la grille
	for i = 1 to 4
		if(checksX[i] <> 0)
			xPositions[i] = dataGrid.moveShapeX + checksX[i] - 1
		endif
	next i
	
	// Pour chaque colonne, on regarde si le block entre en collision
	// avec d'autre blocks
	for i = 1 to 4
		if(checksX[i]<>0)
			if(dataGrid.grid[xPositions[i]-1, dataGrid.moveShapeY + i-1] <> 0)
				leftOk = 0 
			endif
		endif
	next i
	
endfunction leftOk

// Fonction permettant de voir si on peux ce déplacer à droite
function isRightOk(shape as TetrisShape, dataGrid as dataGridGame)
	rightOk as integer = 1
	shapeLine as string
	i as integer
	j as integer
	checksX as integer[4] = [0,0,0,0,0]
	xPositions as integer[4] = [0,0,0,0,0]
	
	for i = 1 to 4
		shapeLine = shape.rotation[shape.moveShapeRotation, i]
		
		// Pour chaque ligne, on trouve quelle colonne peut être en collision
		for j = 4 to 1 step -1
			if(Val(Mid(shapeLine,j,1)) <> 0 and checksX[i] = 0)
				checksX[i] = j
			endIf
		next j
	next i
	
	// On trouve la position x des colonnes dans la grille
	for i = 1 to 4
		if(checksX[i] <> 0)
			xPositions[i] = dataGrid.moveShapeX + checksX[i] - 1
		endif
	next i
	
	// Pour chaque colonne, on regarde si le block entre en collision
	// avec d'autre blocks
	for i = 1 to 4
		if(checksX[i]<>0)
			if(dataGrid.grid[xPositions[i]+1, dataGrid.moveShapeY + i-1] <> 0)
				rightOk = 0
			endif
		endif
	next i
	
endfunction rightOk

// Fonction permettant de voir si la figure peux descendre plus bas
function checkBelowShape(dataGrid ref as dataGridGame, currentShape as TetrisShape)
	
	changeShape as integer = 0
	
	y1 as integer = 0
	y2 as integer = 0
	y3 as integer = 0
	y4 as integer = 0
	
	checky1 as integer
	checky2 as integer
	checky3 as integer
	checky4 as integer
	
	checky1 = currentShape.checks[currentShape.moveShapeRotation, 1]
	checky2 = currentShape.checks[currentShape.moveShapeRotation, 2]
	checky3 = currentShape.checks[currentShape.moveShapeRotation, 3]
	checky4 = currentShape.checks[currentShape.moveShapeRotation, 4]
	
	
	// Ici, les différents y représentent les blocks potentiellements "bloquant"
	// pour les différents points de collision de la figure
	if checky1 <> 0
		y1 = dataGrid.grid[dataGrid.moveShapeX, dataGrid.moveShapeY+checky1]
	endif
	if checky2 <> 0
		y2 = dataGrid.grid[dataGrid.moveShapeX+1, dataGrid.moveShapeY+checky2]
	endif
	if checky3 <> 0
		y3 = dataGrid.grid[dataGrid.moveShapeX+2, dataGrid.moveShapeY+checky3]
	endif
	if checky4 <> 0
		y4 = dataGrid.grid[dataGrid.moveShapeX+3, dataGrid.moveShapeY+checky4]
	endif
	
	//~ Print("checky1:" + str(checky1))
	//~ Print("checky2:" + str(checky2))
	//~ Print("checky3:" + str(checky3))
	//~ Print("checky4:" + str(checky4))
	//~ 
	//~ Print("y1:" + str(y1))
	//~ Print("y2:" + str(y2))
	//~ Print("y3:" + str(y3))
	//~ Print("y4:" + str(y4))
	
	if y1 + y2 + y3 + y4 <> 0
		changeShape = 1
	endif
	
endFunction changeShape
